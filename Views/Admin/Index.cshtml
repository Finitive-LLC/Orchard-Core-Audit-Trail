@model AuditTrailViewModel

@{
    var auditTrailEvents = Model.AuditTrailEvents;

    var orderByItems = new List<SelectListItem> 
    {
        new SelectListItem 
        {
            Text = T["Date (newest first)"].Value, 
            Value = AuditTrailOrderBy.DateDescending.ToString(), 
            Selected = Model.OrderBy == AuditTrailOrderBy.DateDescending
        },
        new SelectListItem 
        {
            Text = T["Category (alphabetical)"].Value, 
            Value = AuditTrailOrderBy.CategoryAscending.ToString(), 
            Selected = Model.OrderBy == AuditTrailOrderBy.CategoryAscending
        },
        new SelectListItem 
        {
            Text = T["Event name (alphabetical)"].Value, 
            Value = AuditTrailOrderBy.EventAscending.ToString(), 
            Selected = Model.OrderBy == AuditTrailOrderBy.EventAscending},
    };
}

<h1 class="mb-4">@RenderTitleSegments(T["Audit Trail"])</h1>

<form asp-action="Index" method="get" class="mb-4">
    <div class="form-row">
        @await DisplayAsync(Model.FilterDisplay)
        <div class="col">
            <div class="form-group">
                <label asp-for="OrderBy">@T["Sort by:"]</label>
                <select asp-for="OrderBy" asp-items="orderByItems" class="form-control"></select>
            </div>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">@T["Apply"]</button>
</form>


@if (!auditTrailEvents.Any()) 
{
    <div class="alert alert-primary" role="alert">@T["There are no records to display."]</div>
}
else 
{
    <div class="table-responsive">
        <table class="table table-hover table-striped table-bordered">
            <thead>
                <tr>
                    <th scope="col"></th>
                    <th scope="col">@T["Category"]</th>
                    <th scope="col">@T["Event"]</th>
                    <th scope="col">@T["User"]</th>
                    @await DisplayAsync(Model.AdditionalColumnNames)
                    <th scope="col">@T["Client IP"]</th>
                    <th scope="col">@T["Timestamp"]</th>
                    <th scope="col">@T["Summary"]</th>
                    <th scope="col">@T["Comment"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var auditTrailEvent in auditTrailEvents) {
                    <tr>
                        <td>@await DisplayAsync(await auditTrailEvent.ActionsShape)</td>
                        <td>@auditTrailEvent.CategoryDescriptor.LocalizedName</td>
                        <td>@auditTrailEvent.EventDescriptor.LocalizedName</td>
                        <td>@auditTrailEvent.AuditTrailEvent.UserName</td>
                        @await DisplayAsync(await auditTrailEvent.AdditionalColumnsShapes)
                        <td>@auditTrailEvent.AuditTrailEvent.ClientIpAddress</td>
                        <td>@await DisplayAsync(await New.DateTime(Utc: auditTrailEvent.AuditTrailEvent.CreatedUtc))</td>
                        <td>@await DisplayAsync(await auditTrailEvent.SummaryShape)</td>
                        <td>@Html.Raw(auditTrailEvent.AuditTrailEvent.Comment)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@await DisplayAsync(Model.Pager)
